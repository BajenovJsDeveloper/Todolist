{"version":3,"sources":["store/reducer.ts","components/CategoryAddButton/CategoryAddButton.tsx","components/CategoryItem/CategoryItem.tsx","components/CategoryList/CategoryList.tsx","components/SlideButton/SlideButton.tsx","components/TodosCategory/TodoCategory.tsx","components/TasksTable/TasksTable.tsx","components/ModalForm/ModalForm.tsx","components/Todos.tsx","serviceWorker.ts","index.tsx"],"names":["initState","currentCategoryId","currentTaskId","isVisibleModal","categoryes","id","description","createdAt","Date","toLocaleString","tasksList","titleDescription","isCompleted","connect","dispatch","showModalForm","type","props","className","onClick","CategoryItem","idx","keyDown","itemClick","itemDescription","itemId","curCatId","role","tabIndex","onKeyDown","CategoryList","categoryList","map","item","key","SlideButton","toggleClick","rotateArrow","state","selectCategory","payload","useState","isShow","setVisibility","showClick","console","log","TasksTable","categoryTitle","i","ValueObject","value","name","this","ModalForm","title","visible","inputName","placeHolder","label","onOK","onCancel","valuesObject","setValue","wrapper","onChange","e","inputValue","target","newValue","inputChange","onFocus","placeholder","connector","addTask","values","removeModal","currentCategoryElement","filter","Boolean","window","location","hostname","match","store","createStore","action","newState","lastCId","length","newID","newCategory","push","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1a615588.chunk.js","sourcesContent":["import { Values } from '../components/ModalForm/ModalForm'\n\ninterface Actions {\n  type: string;\n  payload: undefined | number | string | Values[];\n}\n\nconst initState = {\n  currentCategoryId: 1,\n  currentTaskId: 1,\n  isVisibleModal: false,\n  categoryes: [\n    {\n      id: 1,\n      description: 'Category 1',\n      createdAt: new Date().toLocaleString('en-US'),\n      tasksList: [\n        {\n          id: 1,\n          titleDescription:\n            'Lorem ipsum dolor sit amet, consectetur adipisicing elit. Placeat provident corporis explicabo ducimus iure quae ad impedit debitis in! Totam praesentium reprehenderit aliquid explicabo voluptate voluptatum repellat. Voluptatum, numquam accusamus.',\n          isCompleted: true,\n          createdAt: '01.01.2020',\n        },\n        {\n          id: 2,\n          titleDescription:\n            'Lorem ipsum dolor sit amet, consectetur adipisicing elit. Placeat provident corporis explicabo ducimus iure quae ad impedit debitis in! Totam praesentium reprehenderit aliquid explicabo voluptate voluptatum repellat. Voluptatum, numquam accusamus.',\n          isCompleted: false,\n          createdAt: '02.01.2020',\n        },\n        {\n          id: 3,\n          titleDescription:\n            'Lorem ipsum dolor sit amet, consectetur adipisicing elit. Placeat provident corporis explicabo ducimus iure quae ad impedit debitis in! Totam praesentium reprehenderit aliquid explicabo voluptate voluptatum repellat. Voluptatum, numquam accusamus.',\n          isCompleted: false,\n          createdAt: '02.01.2020',\n        },\n        {\n          id: 4,\n          titleDescription:\n            'Lorem ipsum dolor sit amet.',\n          isCompleted: false,\n          createdAt: '02.01.2020',\n        },\n        {\n          id: 5,\n          titleDescription:\n            'Lorem ipsum dolor sit amet.',\n          isCompleted: false,\n          createdAt: '02.01.2020',\n        },\n        {\n          id: 6,\n          titleDescription:\n            'Lorem ipsum dolor sit amet.',\n          isCompleted: false,\n          createdAt: '02.01.2020',\n        },\n        {\n          id: 7,\n          titleDescription:\n            'Lorem ipsum dolor sit amet.',\n          isCompleted: false,\n          createdAt: '02.01.2020',\n        },\n        {\n          id: 8,\n          titleDescription:\n            'Lorem ipsum dolor sit amet.',\n          isCompleted: false,\n          createdAt: '02.01.2020',\n        },\n      ],\n    },\n  ],\n};\nexport interface TasksList {\n  id: number;\n  titleDescription: string;\n  isCompleted: boolean;\n  createdAt: string;\n}\n\nexport interface Categoryes {\n  id: number;\n  description: string;\n  createdAt: string;\n  tasksList: Array<TasksList>;\n}\n\nexport interface StateInit {\n  currentCategoryId: number;\n  currentTaskId: number;\n  isVisibleModal: boolean;\n  categoryes: Array<Categoryes>;\n}\n\nconst reducer = function (state: StateInit = initState, action: Actions) {\n  const newState = { ...state };\n  switch (action.type) {\n    case 'ADD_CATEGORY':\n      {\n        const lastCId:number = newState.categoryes.length - 1;\n        const newID:number = newState.categoryes[lastCId].id + 1;\n        const title = (typeof action.payload === 'object')\n          ? action.payload[0].value \n          : `New Category ${newID}`;\n        const newCategory = {\n          id: newID,\n          description: title,\n          createdAt: new Date().toLocaleString('en-US'),\n          tasksList: [],\n        };\n        newState.categoryes.push(newCategory);\n        newState.isVisibleModal = true;\n        newState.currentCategoryId = newID;\n      }\n      break;\n    case 'SELECT_CATEGORY': {\n      if (typeof action.payload === 'number')\n        newState.currentCategoryId = action.payload;\n        // newState.isVisibleModal = true;\n    }\n    break;\n    case 'REMOVE_MODAL':{\n      newState.isVisibleModal = false;\n    }\n    break;\n    case 'SHOW_MODAL':{\n      newState.isVisibleModal = true;\n    }\n  }\n\n  return newState;\n};\n\nexport { reducer };\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\ninterface Props {\r\n  showModalForm: () => void;\r\n}\r\n\r\nfunction CategoryAddButton(props: Props) {\r\n  const { showModalForm } = props;\r\n  const hdlClackAdd = () => {\r\n    showModalForm();\r\n  };\r\n\r\n  return (\r\n    <div className=\"cg-button\">\r\n      <button onClick={hdlClackAdd} type=\"button\">\r\n        Add todos\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\ninterface Dispatch {\r\n  (type: { type: string }): void;\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n  showModalForm: () => dispatch({ type: 'SHOW_MODAL' }),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(CategoryAddButton);\r\n","import React from 'react';\r\n\r\ninterface CItemProps{\r\n\tidx: number;\r\n\tkeyDown: () => void;\r\n\titemClick: (itemId: number) => void;\r\n\titemDescription: string;\r\n\titemId: number; \r\n\tcurCatId: number;\r\n}\r\n\r\nconst CategoryItem:React.FC<CItemProps> = (props) => {\r\n\tconst {\r\n\t\tidx, \r\n\t\tkeyDown,\r\n\t\titemClick,\r\n\t\titemDescription, \r\n\t\titemId, \r\n\t\tcurCatId} = props;\r\n\r\n\treturn (\r\n\t\t\t<div\r\n\t      role=\"button\"\r\n\t      tabIndex={idx}\r\n\t      onKeyDown={keyDown}\r\n\t      className={`cg-item ${(curCatId === itemId)? 'active' : ''}`}\r\n\t      onClick={() => itemClick(itemId)}\r\n\t      >\r\n\t      {itemDescription}\r\n\t      <p>{}</p>\r\n\t    </div>\r\n\t\t);\r\n};\r\n\r\nexport default CategoryItem","import React from 'react';\r\nimport { Categoryes } from '../../store/reducer';\r\nimport CategoryItem from '../CategoryItem/CategoryItem';\r\n\r\ninterface CListProps{\r\n\tcategoryList: Array<Categoryes>;\r\n\titemClick: (itemid: number) => void;\r\n\tcurCatId: number;\r\n} \r\n\r\n const CategoryList:React.FC<CListProps> = (props: CListProps) => {\r\n\tconst { curCatId, categoryList, itemClick } = props;\r\n\r\n\tconst keyDown = () => {\r\n\t\t//\r\n\t}\r\n\treturn(\r\n\t\t\t<div className=\"cg-list\">\r\n\t        {\r\n\t         categoryList.map((item, idx) => (\r\n\t              <CategoryItem \r\n\t              \tkey={item.id + 'cg-item'}\r\n\t                idx={idx} \r\n\t\t\t\t\t\t\t\t  keyDown={keyDown}\r\n\t\t\t\t\t\t\t\t\titemClick={itemClick}\r\n\t\t\t\t\t\t\t\t\titemDescription={item.description} \r\n\t\t\t\t\t\t\t\t\titemId={item.id} \r\n\t\t\t\t\t\t\t\t\tcurCatId={curCatId}\r\n\t              />\r\n\t            ))\r\n\t        }\r\n      </div>\r\n\t\t)\r\n};\r\n\r\nexport default CategoryList","import React from 'react';\r\n\r\ninterface SButtonProps{\r\n\ttoggleClick: () => void;\r\n\trotateArrow: boolean;\r\n}\r\n\r\nconst SlideButton:React.FC<SButtonProps> = (props:SButtonProps) => {\r\n\tconst { toggleClick, rotateArrow } = props;\r\n\treturn (\r\n\t\t\t<div className=\"cg-side-button\" onClick={toggleClick}>\r\n\t\t\t\t<div className={`arrow ${(rotateArrow)? 'rotate':''}`}></div>\r\n\t\t\t</div>\r\n\t\t)\r\n};\r\n\r\nexport default SlideButton;","import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { StateInit } from '../../store/reducer';\nimport CategoryAddButton from '../../components/CategoryAddButton/CategoryAddButton';\nimport CategoryList from '../../components/CategoryList/CategoryList';\nimport SlideButton from '../SlideButton/SlideButton';\n// import cn from 'classnames';\n\ninterface Props {\n  state: StateInit;\n  selectCategory: (id: number) => void;\n}\n\n\nfunction TodoCategories(props: Props) {\n  const { state, selectCategory } = props;\n  const [isShow, setVisibility] = useState(false);\n  const curCatId = state.currentCategoryId;\n \n  const categoryClick = (id: number) => {\n    selectCategory(id);\n  };\n  const showClick = () => {\n  \tsetVisibility(!isShow);\n  \tconsole.log('show click...');\n  }\n\n  const keyDown = () => {};\n  return (\n    <>\n      <div className=\"cg-title\">\n        <h3> Todo categories </h3>\n      </div>\n      <div \n      \tclassName={`back-font ${(isShow)? 'fadein': 'fadeout'}`}\n      \tonClick={showClick}>\n      </div>\n      <SlideButton toggleClick={showClick} rotateArrow={isShow}/>\n      <div className={`cg-container ${(isShow)? 'show': 'hide'}`}>\n      \t<CategoryList\n      \t\tcurCatId={curCatId} \n      \t\titemClick={categoryClick}\n      \t\tcategoryList={state.categoryes}>\n      \t</CategoryList>\n        <CategoryAddButton />\n      </div>\n    </>\n  );\n}\ninterface Dispatch {\n  (type: { type: string; payload: number }): void;\n}\n\nconst mapStateToProps = (state: StateInit) => ({ state });\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n  return {\n    selectCategory: (id: number) =>\n      dispatch({ type: 'SELECT_CATEGORY', payload: id }),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoCategories);\n","import React from 'react';\nimport { TasksList } from '../../store/reducer';\n\ninterface Props {\n  tasksList: Array<TasksList>;\n  categoryTitle: string;\n}\n\nfunction TasksTable(props: Props) {\n  const { tasksList, categoryTitle } = props;\n  const isDone = '';\n\n  return (\n  \t<>\n\t  \t<div className=\"task-title\">{categoryTitle}</div>\n\t    <div className=\"task-list\">\n\t      {tasksList\n\t        ? tasksList.map((i, idx) => (\n\t            <div\n\t              className={`task-item ${i.isCompleted ? 'done' : ''}`}\n\t              key={i.id + 'task-item'}\n\t            >\n\t              <p className=\"task-text\">{i.titleDescription}</p>\n\t              <p>Last modified on: {i.createdAt}</p>\n\t            </div>\n\t          ))\n\t        : ''}\n\t    </div>\n    </>\n  );\n}\n\nexport default TasksTable;\n","import React from 'react';\r\nimport { useState } from 'react';\r\nimport './modal.scss';\r\n\r\ninterface Props{\r\n\ttitle:string;\r\n\tvisible:boolean;\r\n\tinputName: Array<string>;\r\n\tplaceHolder: Array<string>;\r\n\tlabel: Array<string>;\r\n\tonOK: (values: Array<ValueObject>) => void;\r\n\tonCancel: () => void;\r\n}\r\n\r\n\r\nclass ValueObject{\r\n\tpublic value: string;\r\n\tpublic name: string;\r\n\tconstructor(){\r\n\t\tthis.value = '';\r\n\t\tthis.name = '';\r\n\t}\r\n}\r\n\r\nexport interface Values extends ValueObject{}\r\n\r\n\r\nfunction  ModalForm<FC>(props: Props){\r\n\tconst { \r\n\t\ttitle, \r\n\t\tvisible, \r\n\t\tinputName, \r\n\t\tplaceHolder, \r\n\t\tlabel,\r\n\t\tonOK,\r\n\t\tonCancel,\r\n\t} = props;\r\n\tconst valuesObject:Array<ValueObject> = inputName.map(i => new ValueObject)\r\n\tconst [value, setValue] = useState(valuesObject);\r\n\r\n\tconst inputChange = (e:React.ChangeEvent, idx:number) => {\r\n\t\tconst item = e.target as HTMLInputElement;\r\n\t\tconst inputValue = item.value;\r\n\t\tconst newValue = [...value];\r\n\t\tnewValue[idx].value = inputValue;\r\n\t\tsetValue(newValue);\r\n\t}\r\n\r\n\tconst onFocus:(e:React.FocusEvent) => void = (e:React.FocusEvent) => {\r\n\r\n\t} \r\n\r\n\tconst wrapper = inputName.map((i, idx) =>(\r\n\t\t<div className=\"modal-input\">\r\n\t\t<label>{label[idx]}\r\n\t\t\t<input \r\n\t\t\t\tname={i} \r\n\t\t\t\tonChange={(e) => inputChange(e, idx)}\r\n\t\t\t\tvalue={value[idx].value}\r\n\t\t\t\tonFocus={(e) => onFocus(e)}\r\n\t\t\t\tplaceholder={placeHolder[idx]}/>\r\n\t\t\t</label>\r\n\t\t</div>\r\n\t));\r\n\t\r\n\tconsole.log(value);\r\n\treturn (\r\n\t\t\t<>{visible &&\r\n\t\t\t\t\t<div className=\"modal-background\"></div>\r\n\t\t\t\t}\r\n\t\t\t\t{visible &&\r\n\t\t\t\t\t<section className=\"modal-input-group\">\r\n\t\t\t\t\t\t<h3>{title}</h3>\r\n\t\t\t\t\t\t{wrapper}\r\n\t\t\t\t\t\t<div className=\"modal-input-footer\">\r\n\t\t\t\t\t\t\t<button \r\n\t\t\t\t\t\t\t\trole=\"button\" \r\n\t\t\t\t\t\t\t\ttype=\"button\" \r\n\t\t\t\t\t\t\t\tonClick={onCancel}\r\n\t\t\t\t\t\t\t\tname=\"cancel\">Cancel</button>\r\n\t\t\t\t\t\t\t<button \r\n\t\t\t\t\t\t\t\trole=\"button\" \r\n\t\t\t\t\t\t\t\ttype=\"button\" \r\n\t\t\t\t\t\t\t\tonClick={() => onOK(value)}\r\n\t\t\t\t\t\t\t\tname=\"submit\">OK</button>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</section>\r\n\t\t\t\t}\r\n\t\t\t</>\r\n\t\t)\r\n}\r\n\r\nexport default ModalForm;\r\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React from 'react';\nimport './index.scss';\nimport { connect } from 'react-redux';\nimport { StateInit } from '../store/reducer';\nimport TodoCategories from './TodosCategory/TodoCategory';\nimport TasksTable from './TasksTable/TasksTable';\nimport ModalForm, { Values } from './ModalForm/ModalForm';\n\ninterface Props {\n  state: StateInit;\n  addTask: (values: Array<Values>) => void;\n  removeModal: () => void;\n}\n\ninterface Dispatch {\n  (type: { type: string, payload?: Array<Values> }): void;\n}\n\nfunction Todos(props: Props) {\n  const { addTask, state, removeModal } = props;\n  const { isVisibleModal } = state;\n  const currentCategoryElement = state.categoryes.filter(\n    (item) => item.id === state.currentCategoryId\n  )[0];\n  const categoryTitle: string = currentCategoryElement.description;\n  const okClick = (values: Array<Values>) => {\n    addTask(values);\n    removeModal();\n  };\n  const cancelClick = () => {\n    removeModal();\n  };\n  console.log(state);\n  return (\n    <>\n      <ModalForm \n        title=\"Create new category\" \n        visible={isVisibleModal} \n        label={['Input category name']}\n        inputName={['categoryName']}\n        onOK={okClick}\n        onCancel={cancelClick} \n        placeHolder={['Homework']}/>\n      <div className=\"container\">\n        <TodoCategories />\n        <TasksTable \n          categoryTitle={categoryTitle}\n          tasksList={currentCategoryElement.tasksList} />\n      </div>\n    </>\n  );\n}\n\nconst mapStetaToProps = (state: StateInit) => ({ state });\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n  return { \n    addTask: (values: Array<Values>) => dispatch({ type: 'ADD_CATEGORY', payload: values}),\n    removeModal: () => dispatch({ type: 'REMOVE_MODAL' })\n  };\n};\n\nconst connector = connect(mapStetaToProps, mapDispatchToProps);\n\nexport default connector(Todos);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport { reducer } from './store/reducer';\nimport Todos from './components/Todos';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(reducer);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <Todos />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}